  (1:0-5) for (usin               <--    (1:0-5) for (cons
          ^^^^^                                  ^^^^^

 (1:5-11) or (using x of          <--   (1:5-11) or (const _x o
              ^^^^^^                                 ^^^^^^

(1:11-12) ing x of                <--  (1:11-13) nst _x of 
              ^                                      ^^

(1:12-16) ng x of it)             <--  (1:13-17) t _x of it) 
              ^^^^                                   ^^^^

(1:16-18)  of it) {               <--  (1:17-19)  of it) tr
              ^^                                     ^^

(1:18-20) f it) {                 <--  (1:19-25) f it) try {
              ^^                                     ^^^^^^

(1:20-20) it) {                   <--  (1:25-26) try {
             ><                                      ^

(1:20-20) it) {                   <--    (2:2-6)   var _sta
             ><                                    ^^^^

(1:20-20) it) {                   <--   (2:6-12) var _stack = [
             ><                                      ^^^^^^

(1:20-20) it) {                   <--  (2:12-18) tack = [];
             ><                                      ^^^^^^

(1:20-20) it) {                   <--    (3:2-8)   const x = 
             ><                                    ^^^^^^

(1:11-12) ing x of                <--    (3:8-9) nst x = b
              ^                                      ^

(1:12-21) ng x of it) {           <--   (3:9-12) st x = babe
              ^^^^^^^^^                              ^^^

(1:12-21) ng x of it) {           <--  (3:12-24) x = babelHelpers.usi
              ^^^^^^^^^                              ^^^^^^^^^^^^

(1:12-21) ng x of it) {           <--  (3:24-25) pers.usin
              ^^^^^^^^^                              ^

(1:12-21) ng x of it) {           <--  (3:25-30) ers.using(_st
              ^^^^^^^^^                              ^^^^^

(1:12-21) ng x of it) {           <--  (3:30-31) sing(_sta
              ^^^^^^^^^                              ^

(1:12-21) ng x of it) {           <--  (3:31-37) ing(_stack, _x
              ^^^^^^^^^                              ^^^^^^

(1:12-21) ng x of it) {           <--  (3:37-39) tack, _x);
              ^^^^^^^^^                              ^^

(1:12-21) ng x of it) {           <--  (3:39-41) ck, _x);
              ^^^^^^^^^                              ^^

(1:12-21) ng x of it) {           <--  (3:41-43) , _x);
              ^^^^^^^^^                              ^^

 (2:2-17)   doSomethingWith(x);   <--   (4:2-17)   doSomethingWith(x);
            ^^^^^^^^^^^^^^^                        ^^^^^^^^^^^^^^^

(2:17-18) With(x);                <--  (4:17-18) With(x);
              ^                                      ^

(2:18-19) ith(x);                 <--  (4:18-19) ith(x);
              ^                                      ^

(2:19-20) th(x);                  <--  (4:19-20) th(x);
              ^                                      ^

(2:20-21) h(x);                   <--  (4:20-21) h(x);
              ^                                      ^

  (3:0-1) }                       <--    (5:0-1) } cat
          ^                                      ^

  (3:1-1) }                       <--    (5:1-9) } catch (_) {
          ><                                      ^^^^^^^^

  (3:1-1) }                       <--   (5:9-10) ch (_) {
          ><                                         ^

  (3:1-1) }                       <--  (5:10-13) h (_) {
          ><                                         ^^^

  (3:1-1) }                       <--    (6:2-6)   var _err
          ><                                       ^^^^

  (3:1-1) }                       <--   (6:6-12) var _error = _
          ><                                         ^^^^^^

  (3:1-1) }                       <--  (6:12-15) rror = _;
          ><                                         ^^^

  (3:1-1) }                       <--  (6:15-16) r = _;
          ><                                         ^

  (3:1-1) }                       <--  (6:16-17)  = _;
          ><                                         ^

  (3:1-1) }                       <--    (7:2-6)   var _has
          ><                                       ^^^^

  (3:1-1) }                       <--   (7:6-15) var _hasError = t
          ><                                         ^^^^^^^^^

  (3:1-1) }                       <--  (7:15-23) rror = true;
          ><                                         ^^^^^^^^

  (3:1-1) }                       <--   (8:0-11) } finally {
          ><                                     ^^^^^^^^^^^

  (3:1-1) }                       <--   (9:2-14)   babelHelpers.dis
          ><                                       ^^^^^^^^^^^^

  (3:1-1) }                       <--  (9:14-15) pers.disp
          ><                                         ^

  (3:1-1) }                       <--  (9:15-22) ers.dispose(_st
          ><                                         ^^^^^^^

  (3:1-1) }                       <--  (9:22-23) pose(_sta
          ><                                         ^

  (3:1-1) }                       <--  (9:23-29) ose(_stack, _e
          ><                                         ^^^^^^

  (3:1-1) }                       <--  (9:29-31) tack, _err
          ><                                         ^^

  (3:1-1) }                       <--  (9:31-37) ck, _error, _h
          ><                                         ^^^^^^

  (3:1-1) }                       <--  (9:37-39) rror, _has
          ><                                         ^^

  (3:1-1) }                       <--  (9:39-48) or, _hasError);
          ><                                         ^^^^^^^^^

  (3:1-1) }                       <--  (9:48-50) rror);
          ><                                         ^^

  (3:1-1) }                       <--   (10:0-1) }
          ><                                     ^
